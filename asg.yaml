Description: Template for auto scaling group

Resources:
  ASGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for asg group
      VpcId: !ImportValue AZStack:VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5099'
          ToPort: '5099'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  # Resource LaunchTemplate for EC2 instances (CloudShirt)
  launchTemplateCS:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: CloudShirtLT
      LaunchTemplateData: 
        InstanceType: t2.micro
        ImageId: ami-08b5b3a93ed654d19
        KeyName: vockey
        TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: Name
              Value: !Sub "CloudShirtApp"
        UserData: 
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash

                # CloudShirt Application Setup Script
                # This script installs and configures everything needed to run the CloudShirt application
                # with an external SQL Server, RDS database and EFS file system
                # Install docker
                sudo yum install -y docker
                sudo systemctl start docker
                sudo systemctl enable docker
                sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose

                # Install git
                sudo yum install git -y
                sudo git clone https://github.com/looking4ward/CloudShirt.git

                # Mount EFS
                yum -y install nfs-utils
                mkdir /EFS
                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFS_DNS}.efs.us-east-1.amazonaws.com:/ /EFS # example EFS DNS
                cd /EFS
                sudo chmod go+rw .
                cd /

                # aws credentials
                cd ~/.aws/
                sudo rm -Rf credentials
                cat > ~/.aws/credentials << 'EOF'

                ### CHANGE THIS TO YOUR AWS CREDENTIALS ###
                [default]
                aws_access_key_id=ASIAVLVB52TJMKRXD66C
                aws_secret_access_key=aT7iMqj8Mg2Vadhq/gl1RnGMCVHrDiBL9dtXrYMW
                aws_session_token=IQoJb3JpZ2luX2VjEBMaCXVzLXdlc3QtMiJGMEQCIHldwPxzRLf1QtuW14jJUAF0bft2Z3euocEMV6kkW/XnAiBG7w5VuI/H/e+bwr2ZMRyHY0k/qASYlCRFuq1BY21uLSq7AgiM//////////8BEAEaDDM2ODYzMzA0MjEzMCIMAQeekP2Iebm90XzWKo8CXlH0lOsX/4ez/V1+jbU0Njzubr7zlr2Tc/M+7CE3tmSvbRUEw5Xr4XgOP2a3t076bkce4SBNPeNG4Cc9n8CLbc52Y0DvnH5CAJmNcFOoyXuCtQxdaVY02Qt0Pq176qgK0EvZ81oumWDEp6Hho9gKAB13Ve/rMXVWUUH72nsPBZcGhk7HlbLFUMKuHkdVry2bzLvLhsu9p5JF4YBlsW+DXY8dOw8zChryYjpFP4seNNtImxMAFepriW+ooPBGLIt3J7YkHifjl1q/394h6Capkf9lY3aB6uCvL9ENNABXC8bKip8BNIvIUGTwEqg0hV8qwgVURPETt6wREBwzppOmVoSF5Q9lAsP2GkDJltxxgTDZrNm/BjqeAZ7qzeJFkScrDymqiG8FEWP+at08G3s4/ifb8VdA14dBJv6tOR7z5NZcZ+uk9YQUDnzS5XCwH5f4cxGwpxyVnkfjZxt98KuJ2gN4F4Z2b1/bZIFpVO8ep3Ag83TY4hYuhm6blbFrPD3lCFbqWW+3oamjPBObhvkioBLeZEjinZzHF80LAekT72P4MA/7qcGEC9YQ90ooqpxHauQN5jOD

                EOF
                cd /

                # Join the swarm cluster
                SWARMJOIN=$(cat swarm_join_command)
                sudo $(echo "$SWARMJOIN")

                # Docker compose file
                cat > /home/ec2-user/docker-compose.yml << 'EOF'
                version: "3.8"
                services:
                  web:
                    image: ${}:latest
                    ports:
                      - "80:80"
                    command:
                      sudo sed -i "s/Server.*CatalogDb;/Server=${RDS_ENDPOINT},1433;User ID=${RDS_USERNAME};Password=${RDS_PASSWORD};Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/" CloudShirt/src/Web/appsettings.json
                      sudo sed -i "s/Server.*Identity;/Server=${RDS_ENDPOINT},1433;User ID=${RDS_USERNAME};Password=${RDS_PASSWORD};Initial Catalog=Microsoft.eShopOnWeb.Identity;/" CloudShirt/src/Web/appsettings.json
                  publicapi:
                    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/cloudshirt-image-repo:latest
                    ports:
                      - "5099:80"
                    command:
                      sudo sed -i "s/Server.*CatalogDb;/Server=${RDS_ENDPOINT},1433;User ID=${RDS_USERNAME};Password=${RDS_PASSWORD};Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/" CloudShirt/src/PublicApi/appsettings.json
                      sudo sed -i "s/Server.*Identity;/Server=${RDS_ENDPOINT},1433;User ID=${RDS_USERNAME};Password=${RDS_PASSWORD};Initial Catalog=Microsoft.eShopOnWeb.Identity;/" CloudShirt/src/PublicApi/appsettings.json
                EOF

                # Log in to ECR
                AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECR_URI}

                # Get the public ip of the ec2-instance
                INSTANCE_PUBLIC_IP=$(wget -qO- http://checkip.amazonaws.com)

                # Run the docker-compose 
                sudo docker-compose up >> /EFS/$INSTANCE_PUBLIC_IP.docker.log 2>&1 &
              - RDS_ENDPOINT: 
                  Fn::ImportValue: DatabaseStack:RDSEndpoint
                RDS_USERNAME:
                  Fn::ImportValue: DatabaseStack:DBUsername
                RDS_PASSWORD:
                  Fn::ImportValue: DatabaseStack:DBPassword
                EFS_DNS:
                  Fn::ImportValue: EFSStack:EFSdns
                ECR_URI:
                  Fn::ImportValue: ECRStack:RepoUri
                
        SecurityGroupIds:
          - !Ref ASGSecurityGroup
  
  # Resource AutoScalingGroup launch extra instances when needed
  AutoScalingGroupCS:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref launchTemplateCS
        Version: !GetAtt launchTemplateCS.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !ImportValue AZStack:PublicSubnet1
        - !ImportValue AZStack:PublicSubnet2
      TargetGroupARNs:
        - !ImportValue LBStack:TargetGroup

  UpScalingSchedule:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupCS
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 4
      Recurrence: "0 22 * * MON-SUN" # 22:00 UTC is 18:00 in ET

  DownScalingSchedule:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupCS
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      Recurrence: "0 00 * * MON-SUN" # 00:00 UTC is 20:00 in ET
      
Outputs:
  AutoScalingGroupRef:
    Description: Reference to the AutoScalingGroup
    Value: !Ref AutoScalingGroupCS
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "AutoscalingGroup" ] ]
